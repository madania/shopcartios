//
//  AppLaunchManager.swift
//  Shop
//
//  Copyright Â© 2017 SAP SE or an SAP affiliate company. All rights reserved.
//  Use of this software subject to the End User License Agreement located in /src/EULA.pdf
//

import Foundation
import SAPCommon
import SAPFiori

/// A generic UIApplicationDelegate subclass that can be instantiated with an OnboardingFlow and LoginFlow implementation.
/// This class (together with the OnboardingFlow, OnboardingResult, LoginFlow and LoginResult protocols) defines a framework
/// for applications to easily integrate and customize their onboarding and login processes.
/// Together with standard implementations of Onboarding and Login flows, this is provides for an easy foundation for
/// apps to build on.
///
/// To make use of this API, applications should make their AppDelegate (which is usually generated by Xcode when the a new
/// project is created) derive from this class, with the definition of the actual OnboardingFlow and LoginFlow implementations
/// to be used.
open class AppLaunchManager<OnboardingFlowType: OnboardingFlow, LoginFlowType: LoginFlow> {

    fileprivate let logger = Logger.shared(forClass: AppLaunchManager.self)

    public let window: UIWindow
    public let application: UIApplication
    public let launchOptions: [UIApplicationLaunchOptionsKey: Any]?

    /// Property returning the onboarding flow's result object. This will be set
    /// once the onboarding flow has succeeded with a non-nil onboarding result.
    fileprivate(set) public var onboardingResult: OnboardingFlowType.ResultType?
    fileprivate(set) public var loginResult: LoginFlowType.ResultType?

    fileprivate var originalApplicationRootViewController: UIViewController?
    fileprivate var mainStoryboard: UIStoryboard?

    fileprivate let persistenceManager = PersistenceManager()
    fileprivate let blurViewTag = 3779

    fileprivate var onboardingInProcess = false
    fileprivate var loginInProcess = false

    // MARK: - Public API (Not to be overridden by subclasses)

    /// Initializes a new AppLaunchManager instance.
    /// Applications have to call this in their app delegate's
    /// `application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?)`
    /// method.
    ///
    /// - Parameters:
    ///   - window: the application's main window.
    ///   - application: the application
    ///   - launchOptions: the launch options of the app.
    public init(application: UIApplication, window: UIWindow, launchOptions: [UIApplicationLaunchOptionsKey: Any]? = nil) {
        self.window = window
        self.application = application
        self.launchOptions = launchOptions
        originalApplicationRootViewController = window.rootViewController
        mainStoryboard = originalApplicationRootViewController?.storyboard
    }

    // public func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
    /// Method to manage the application's launch. This method will make sure that an onboarding is performed if necessary
    /// and take care of exchanging the application's view controllers for those of an onboarding.
    /// Similarly, it will make sure a login flow is executed if the application requires one.
    /// The completion block will always be called, even if the app has restarted and an onboarding was not performed anymore.
    /// The completion block will hand in the onboarding result from a previous onboarding flow execution.
    /// If a login flow was executed and there was a result, that result will be passed into the completion block as well.
    ///
    /// - Parameter completion: the completion block called when the app launch is complete.
    public func manageAppLaunch(completion: @escaping (OnboardingFlowType.ResultType?, OnboardingFlowType.ErrorType?, LoginFlowType.ResultType?) -> Void) {
        if persistenceManager.isOnboardingDone() {
            logger.debug("Performing login flow and/or app start.")

            restoreOnboardingResult()

            performLogin(completion: { onboardingResult, loginResult in
                completion(onboardingResult, nil, loginResult)
            })
        } else {

            logger.debug("Performing onboarding flow.")
            performOnboarding(completion: { onboardingResult, onboardingError in
                completion(onboardingResult, onboardingError, nil)
            })
        }

        window.makeKeyAndVisible()
    }

    /// Method to safely manage the transition of the application to background.
    /// The method makes sure that the application's UI is blurred before going to
    /// background, thus protecting any displayed and potentially sensitive data.
    /// Applications should call this method in their app delegate's
    /// applicationDidEnterBackground(_ application: UIApplication)
    /// method.
    public func manageTransitionToBackground() {
        logger.debug("Application entering background.")
        let applicationDidEnterBackgroundDate = Date()
        persistenceManager.storeAppDidMoveToBackgroundDate(applicationDidEnterBackgroundDate)
        addBlurImageToWindow()
    }

    /// Method to safely manage the transition of the application to foreground.
    /// The method removes any blur effect that was added to the UI as a result to
    /// calling manageTransitionToBackground().
    /// Applications should call this method in their app delegate's
    /// `applicationWillEnterForeground(_ application: UIApplication)`
    /// method.
    /// Applications who want to know for how long the app has been in background
    /// e.g. to re-trigger a login, should override the method
    ///
    /// Note: this method should one be used in combination with manageTransitionToBackground().
    public func manageTransitionToForeground() {
        removeBlurImageFromWindow()
        let applicationWillEnterForegroundDate = Date()

        if let applicationDidEnterBackgroundDate = persistenceManager.loadAppDidMoveToBackgroundDate() {
            let timeInBackground = Int(applicationWillEnterForegroundDate.timeIntervalSince(applicationDidEnterBackgroundDate))
            self.movedToForeground(timeInBackground: timeInBackground)
        }
    }

    /// Method to abort the currently active onboarding flow.
    /// This method will change the root view controller to the application's
    /// initial view controller. By default, the initial view controller is
    /// retrieved from the application window, when the app starts.
    /// Additionally, this framework will try to derive it from Main.storyboard
    /// if one exists.
    ///
    /// Applications that want to programmatically specify the initial
    /// view controller, should override the method
    ///
    /// `initialViewController(of application:onboardingResult:)`
    public func abortOnboarding() {

        guard onboardingInProcess else {
            logger.debug("AbortOnboarding() called but no onboarding was in progress. Ignoring call.")
            return
        }

        let applicationViewController = initialViewController(of: application, onboardingResult: nil)

        changeRootViewController(to: applicationViewController, animated: true) {
            self.onboardingInProcess = false
        }
    }

    /// Method to abort the currently active login flow.
    /// This method will change the root view controller to the application's
    /// initial view controller. By default, the initial view controller is
    /// retrieved from the application window, when the app starts.
    /// Additionally, this framework will try to derive it from Main.storyboard
    /// if one exists.
    ///
    /// Applications that want to programmatically specify the initial
    /// view controller, should override the method
    ///
    /// `initialViewController(of application:onboardingResult:)`
    public func abortLogin() {

        guard loginInProcess else {
            logger.debug("AbortLogin() called but no login was in progress. Ignoring call.")
            return
        }

        let applicationViewController = initialViewController(of: application, onboardingResult: nil)

        changeRootViewController(to: applicationViewController, animated: true) {
            self.loginInProcess = false
        }
    }

    // MARK: - Extended lifecycle functions

    /// Applications can override this method to return a (programmatically created) initial view controller
    /// that should be shown when onboarding or login finished.
    /// The default implementation takes care of this by remembering the window's root view controller
    /// or looking into the main.storyboard for an initial view controller.
    ///
    /// - Parameters:
    ///   - application: the application whose initial view controller should be shown.
    ///   - onboardingResult: the onboarding result from a previous onboarding.
    open func initialViewController(of application: UIApplication, onboardingResult: OnboardingFlowType.ResultType?) -> UIViewController {

        // if we have not been able to "remember" the apps original root view controller, we try to
        // load it from the storyboard.
        if self.originalApplicationRootViewController == nil {
            self.originalApplicationRootViewController = createInitialApplicationControllerFromStoryboard()
        }

        // if we do not have an original application root view controller from  the app here,
        // we did not remember any, and we could not instantiate one from a storyboard, so we require the
        // application to override this method and return its root view controller instance itself.
        // NOTE: this is for extreme corner cases where an application developer might not use storyboards to
        // describe the root view controller of his app and creates one programmatically.
        guard let originalApplicationRootViewController = self.originalApplicationRootViewController else {
            // swiftlint:disable line_length
            fatalError("Original Application Root View Controller is nil and could not be derived from storyboard. Please override initialViewController(of:onboardingResult:) and return the root view controller instance of your application.")
            // swiftlint:enable line_length
        }

        return originalApplicationRootViewController
    }

    /// Called when the application has come back into the foreground.
    /// Thus allows applications to see how long the app was in the background and decide for itself
    /// if that means that an auto-logout (and if so, when it) should be triggered.
    /// Triggering an auto-logout would be the app's responsibility using the performLogout() method.
    /// This gives the app a chance to clean up before logging out.
    ///
    /// - Parameters:
    ///   - seconds: the seconds that have elapsed in between going to the background and moving to the foreground.
    open func movedToForeground(timeInBackground seconds: Int) {

    }

    // MARK: - Onboarding

    /// Called when an application should perform an onboarding flow.
    /// Applications should override this method to return an OnboardingFlow implementation
    /// that will be executed by the framework.
    ///
    /// - Parameter application: the application that is about to perform an onboarding flow.
    /// - Returns: the OnboardingFlow to be executed by the framework.
    open func onboardingFlowForApplication(_ application: UIApplication) -> OnboardingFlowType {
        fatalError("Applications must override applicationWillStartOnboarding(application) and return a valid OnboardingFlow instance.")
    }

    // MARK: - Login

    /// Called when the login process is about to be started.
    /// Allows the application to return a specific LoginFlow
    /// that will be performed thereafter.
    ///
    /// - Parameters:
    ///   - application: the application that should perform the login flow.
    ///   - result: the onboarding result that might contain information relevant to the login flow.
    /// - Returns: the LoginFlow implementation that should be executed by the framework.
    open func loginFlowForApplication(_ application: UIApplication, withOnboardingResult result: OnboardingFlowType.ResultType?) -> LoginFlowType? {
        fatalError("Applications must override application(willStartLoginWithOnboardingResult:) and return a valid LoginFlow instance.")
    }

    /// Called when the login flow succeeded.
    /// Gives the application access to the LoginResult containing any
    /// information gathered during login.
    ///
    /// - Parameters:
    ///   - application: the application that has finished the login flow.
    ///   - loginResult: the result returned from the LoginFlow implementation, if any.
    open func application(_ application: UIApplication, didFinishLoginWithResult loginResult: LoginFlowType.ResultType?) {

    }

    // MARK: - Logout

    /// Called before the application starts logging out.
    ///
    /// - Parameter application: the application that is about to logout.
    open func willLogoutApplication(_ application: UIApplication) {

    }

    /// Called after the application has successfully
    /// performed the logout.
    ///
    /// - Parameter application: the application that has finished logout.
    open func didFinishLogoutApplication(_ application: UIApplication) {

    }

    /// Method to retrigger a login. This method will force an application
    /// logout, bringing to foreground the initial view controller of
    /// the application's login flow.
    ///
    /// - Parameter completion: <#completion description#>
    public func retriggerLogin(completion: @escaping (OnboardingFlowType.ResultType?, LoginFlowType.ResultType?) -> Void) {

        willLogoutApplication(application)

        // Reset the original root view controller.
        // This will result in creating a new instance
        // from the main.storyboard.
        originalApplicationRootViewController = nil

        performLogin(completion: completion, animated: true) {
            self.didFinishLogoutApplication(self.application)
        }
    }

    /// Performs a logout and shows the view controller
    /// provided by the application.
    /// Applications who want to logout and immediately
    /// re-trigger a login should call
    /// `retriggerLogin(completion:)` instead of this method.
    ///
    /// - Parameter controller: the controller which will be shown once
    ///                         offboarding has completed.
    func performLogout(controller: UIViewController) {
        willLogoutApplication(application)

        // Reset the original root view controller.
        // This will result in creating a new instance
        // from the main.storyboard.
        originalApplicationRootViewController = nil

        changeRootViewController(to: controller, animated: true) {
            self.didFinishLogoutApplication(self.application)
        }
    }

    // MARK: - Offboarding

    /// Called before the application starts offboarding.
    ///
    /// - Parameter application: the application that is about to start offboarding.
    open func willStartOffboardingApplication(_ application: UIApplication) {

    }

    /// Called after the application finished offboarding.
    ///
    /// - Parameter application: the application that has finished offboarding.
    open func didFinishOffboardingApplication(_ application: UIApplication) {

    }

    /// Re-triggers an application onboarding by first offboarding the application
    /// and performing the application's onboarding flow again.
    /// Applications that want to be informed about offboarding events should
    /// derive from this AppLaunchManager and override the respective
    /// offboarding event methods.
    ///
    /// - Parameter completion: the completion block called when onboarding is complete.
    public func retriggerOnboarding(completion: @escaping (OnboardingFlowType.ResultType?, OnboardingFlowType.ErrorType?) -> Void) {

        willStartOffboardingApplication(application)

        persistenceManager.resetOnboardingDoneState()
        persistenceManager.removeAllOnboardingResultData()

        originalApplicationRootViewController = nil
        onboardingResult = nil

        performOnboarding(completion: completion, animated: true) {
            self.didFinishOffboardingApplication(self.application)
        }
    }

    /// Performs an offboarding by discarding all previous
    /// onboarding results and shows the view controller
    /// provided by the application.
    /// Applications who want to offboard and immediately
    /// re-trigger an onboarding should call
    /// `retriggerOnboarding(completion:)` instead of this method.
    ///
    /// - Parameter controller: the controller which will be shown once
    ///                         offboarding has completed.
    func performOffboarding(controller: UIViewController) {
        willStartOffboardingApplication(application)

        persistenceManager.resetOnboardingDoneState()
        persistenceManager.removeAllOnboardingResultData()

        originalApplicationRootViewController = nil
        onboardingResult = nil

        changeRootViewController(to: controller, animated: true) {
            self.didFinishOffboardingApplication(self.application)
        }
    }
}

// MARK: Private API
extension AppLaunchManager {

    // MARK: - Private Onboarding-Related API

    /// Performs the onboarding flow by exchaning the root view controllers of the app.
    /// If animated is true, the switch to the initial onboarding controller is animated and the
    /// completion handler will be called when the animation is finished.
    /// The switch back to the application root view controller is always animated.
    fileprivate func performOnboarding(completion: @escaping (OnboardingFlowType.ResultType?, OnboardingFlowType.ErrorType?) -> Void,
                                       animated: Bool = false,
                                       animationCompletion: (() -> Void)? = nil) {

        onboardingInProcess = true

        let onboardingFlow = onboardingFlowForApplication(application)
        let onboardingRootViewController = onboardingFlow.initialViewController
        changeRootViewController(to: onboardingRootViewController, animated: animated, completion: animationCompletion)

        onboardingFlow.startOnboarding { onboardingResult, onboardingError in

            if let onboardingResult = onboardingResult {
                self.logger.debug("Onboarding succeeded with result. Persisting result and switching to application root view controller.")
                self.onboardingResult = onboardingResult

                let onboardingResultData = onboardingResult.serialize()
                self.persistenceManager.storeOnboardingResultData(onboardingResultData)
                self.persistenceManager.storeOnboardingDoneState()

                let applicationViewController = self.initialViewController(of: self.application, onboardingResult: onboardingResult)

                self.changeRootViewController(to: applicationViewController, animated: true) {
                    self.onboardingInProcess = false
                    completion(onboardingResult, nil)
                }
            } else if let onboardingError = onboardingError {
                self.logger.debug("Onboarding failed with error.")

                self.onboardingInProcess = false
                completion(nil, onboardingError)

            } else {
                self.logger.debug("Onboarding succeeded without error, but also without result.")
                self.persistenceManager.storeOnboardingDoneState()

                let applicationViewController = self.initialViewController(of: self.application, onboardingResult: onboardingResult)
                self.changeRootViewController(to: applicationViewController, animated: true) {
                    self.onboardingInProcess = false
                    completion(onboardingResult, nil)
                }
            }
        }
    }

    fileprivate func restoreOnboardingResult() {

        let loadedOnboardingResultData = persistenceManager.loadOnboardingResultData()
        if let onboardingResultData = loadedOnboardingResultData {
            onboardingResult = OnboardingFlowType.ResultType.deserialize(onboardingResultData)
            logger.debug("Loaded previous onboarding result from disk and de-serialized onboarding result.")
        } else {
            onboardingResult = nil
            logger.debug("No onboarding result data loaded from disk. Setting onboarding result to nil.")
        }
    }

    // MARK: - Private Login-Related API

    /// Handles the execution of the login flow (either executes it or skips login, if the application
    /// did not return a login flow.
    /// If the animated flag is true, changing to the initial view controller of the login flow will be animated.
    /// The change to the application's root view controller after login is done, is always animated.
    ///
    /// - Parameters:
    ///   - completion: the completion handler called when login is complete.
    ///   - animated: flag indicating, if animation to the login flow's initial controller should be animated.
    ///   - animationCompletion: the completion handler that will be called if animated was true,
    ///                          i.e. the initial view controller of the login flow is now visible.
    fileprivate func performLogin(completion: @escaping (OnboardingFlowType.ResultType?, LoginFlowType.ResultType?) -> Void,
                                  animated: Bool = false,
                                  animationCompletion: (() -> Void)? = nil) {

        // Application decides if login is required / wanted. If it returns nil as login flow,
        // login flow is skipped / omitted.
        if let loginFlow = self.loginFlowForApplication(application, withOnboardingResult: self.onboardingResult) {

            loginInProcess = true

            logger.debug("Performing login flow.")
            let loginRootViewController = loginFlow.initialViewController
            changeRootViewController(to: loginRootViewController, animated: animated, completion: animationCompletion)

            loginFlow.startLogin { loginResult in

                let applicationRootViewController = self.initialViewController(of: self.application, onboardingResult: self.onboardingResult)

                self.changeRootViewController(to: applicationRootViewController, animated: true) {

                    self.logger.debug("Login finished. Calling completion handler.")

                    self.loginInProcess = false
                    self.loginResult = loginResult
                    completion(self.onboardingResult, self.loginResult)
                }
            }
        } else {
            logger.debug("Skipping login flow.")
            logger.debug("Performing application start.")
            loginResult = nil
            completion(onboardingResult, loginResult)
        }
    }

    // MARK: - Private Creation Of Initial View Controller from Storyboard

    fileprivate func createInitialApplicationControllerFromStoryboard() -> UIViewController? {

        guard let applicationStoryboard = self.mainStoryboard else {
            logger.warn("Could not retrieve application storyboard. Cannot create initial application view controller from storyboard")
            return nil
        }

        return applicationStoryboard.instantiateInitialViewController()
    }

    // MARK: - Private Exchanging Root View Controllers Handling

    fileprivate func changeRootViewController(to viewController: UIViewController, animated: Bool = false, options: UIViewAnimationOptions = [], completion: (() -> Void)? = nil) {

        if animated {

            guard let currentViewController = window.rootViewController else {
                fatalError("Error! The window does not have a rootViewController. This must be a programming error.")
            }

            UIView.transition(from: currentViewController.view, to: viewController.view, duration: 0.5, options: options) { _ in
                self.window.rootViewController = viewController
                completion?()
            }
        } else {
            window.rootViewController = viewController
        }
    }

    // MARK: - Private Blurring / Unblurring Screen On Move To / From Background

    fileprivate func addBlurImageToWindow() {

        let blurEffect = UIBlurEffect(style: UIBlurEffectStyle.light)
        let blurEffectView = UIVisualEffectView(effect: blurEffect)

        // Use the maximum value for width and height to avoid that the blured window
        // does not cover the complete screen if device is rotated while app is in background
        // and brought to foreground again.b
        let maximumValue = max(window.bounds.height, window.bounds.width)
        blurEffectView.frame = CGRect(x: window.bounds.origin.x, y: window.bounds.origin.y, width: maximumValue, height: maximumValue)
        blurEffectView.tag = blurViewTag
        window.addSubview(blurEffectView)
    }

    fileprivate func removeBlurImageFromWindow() {
        guard let blurView = window.viewWithTag(blurViewTag) else {
            return
        }

        UIView.animate(withDuration: 0.5) {
            blurView.removeFromSuperview()
        }
    }
}
